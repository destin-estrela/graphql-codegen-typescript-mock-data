// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should wrap overrided object types with its associated mock function 1`] = `
"
export const anAvatar = (overrides?: Partial<Avatar>): Avatar => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',
    };
};

export const aUser = (overrides?: Partial<User>): User => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? anAvatar(overrides.avatar!) : anAvatar(),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? aCamelCaseThing(overrides.camelCaseThing!) : aCamelCaseThing(),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : anAvatar(),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,
        interfaceThing: overrides && overrides.hasOwnProperty('interfaceThing') ? anInterfaceThing(overrides.interfaceThing!) : anInterfaceThing(),
        circularThing: overrides && overrides.hasOwnProperty('circularThing') ? aCircularA(overrides.circularThing!) : aCircularA(),
        nonNullableAvatar: overrides && overrides.hasOwnProperty('nonNullableAvatar') ? anAvatar(overrides.nonNullableAvatar!) : anAvatar(),
    };
};

export const aListType = (overrides?: Partial<ListType>): ListType => {
    return {
        listTest1: overrides && overrides.hasOwnProperty('listTest1') ? overrides.listTest1!.map(item => item ? anAvatar(item) : null) : [anAvatar()],
        listTest2: overrides && overrides.hasOwnProperty('listTest2') ? overrides.listTest2!.map(item => anAvatar(item)) : [anAvatar()],
        listTest3: overrides && overrides.hasOwnProperty('listTest3') ? overrides.listTest3!.map(item => item ? item.map(item => item ? item.map(item => item.map(item => item.map(item => anAvatar(item)))) : null) : null) : [[[[[anAvatar()]]]]],
        listTest4: overrides && overrides.hasOwnProperty('listTest4') ? overrides.listTest4!.map(item => item.map(item => item ? item.map(item => anAvatar(item)) : null)) : [[[anAvatar()]]],
        listTest5: overrides && overrides.hasOwnProperty('listTest5') ? overrides.listTest5! : [['sequi']],
        listTest6: overrides && overrides.hasOwnProperty('listTest6') ? overrides.listTest6! : ['et'],
    };
};

export const aCircularA = (overrides?: Partial<CircularA>): CircularA => {
    return {
        circularB: overrides && overrides.hasOwnProperty('circularB') ? aCircularB(overrides.circularB!) : aCircularB(),
        circularC: overrides && overrides.hasOwnProperty('circularC') ? aCircularC(overrides.circularC!) : aCircularC(),
    };
};

export const aCircularB = (overrides?: Partial<CircularB>): CircularB => {
    return {
        circularA: overrides && overrides.hasOwnProperty('circularA') ? aCircularA(overrides.circularA!) : aCircularA(),
    };
};

export const aCircularC = (overrides?: Partial<CircularC>): CircularC => {
    return {
        aCollection: overrides && overrides.hasOwnProperty('aCollection') ? overrides.aCollection!.map(item => aCircularA(item)) : [aCircularA()],
    };
};

export const aCircularD = (overrides?: Partial<CircularD>): CircularD => {
    return {
        circularA: overrides && overrides.hasOwnProperty('circularA') ? aCircularA(overrides.circularA!) : aCircularA(),
        circularB: overrides && overrides.hasOwnProperty('circularB') ? aCircularB(overrides.circularB!) : aCircularB(),
    };
};

export const anInterfaceThing = (overrides?: Partial<InterfaceThing>): InterfaceThing => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a449a58f-9556-4aef-98a6-7496356c71e6',
    };
};

export const anInterfaceA = (overrides?: Partial<InterfaceA>): InterfaceA => {
    return {
        name: overrides && overrides.hasOwnProperty('name') ? overrides.name! : 'sequi',
    };
};

export const anInterfaceB = (overrides?: Partial<InterfaceB>): InterfaceB => {
    return {
        age: overrides && overrides.hasOwnProperty('age') ? overrides.age! : 3406,
    };
};

export const aWithAvatar = (overrides?: Partial<WithAvatar>): WithAvatar => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? anAvatar(overrides.avatar!) : anAvatar(),
    };
};

export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>): CamelCaseThing => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',
    };
};

export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>): PrefixedResponse => {
    return {
        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',
    };
};

export const anAbcType = (overrides?: Partial<AbcType>): AbcType => {
    return {
        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',
    };
};

export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>): UpdateUserInput => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : anAvatar(),
    };
};

export const aMutation = (overrides?: Partial<Mutation>): Mutation => {
    return {
        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? aUser(overrides.updateUser!) : aUser(),
    };
};

export const aQuery = (overrides?: Partial<Query>): Query => {
    return {
        user: overrides && overrides.hasOwnProperty('user') ? aUser(overrides.user!) : aUser(),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? aPrefixedResponse(overrides.prefixed_query!) : aPrefixedResponse(),
    };
};
"
`;
